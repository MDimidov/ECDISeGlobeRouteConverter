<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Af+8lQD/vpcA/76XAP++lwD/u5UB/zuPA/8AmgD/L4wB/6KEAeNlTwQmAAAAABUUFAprYGC9cWZm7zIu
        PSuRdQt3u5UD/76XAP++lwD/v5cA/7SSAP8rigH/AJkA/wCYAP8AlwD/Ko0B/7STAP+/lwD/vpcA/8CY
        AP+4kwH/L44D/wCZAP8djwH/pIsB/X9kBGAAAJUAKiYmFGtgYNFrX2DaHh0oG6CBCa3AmAH/v5cA/76X
        AP++lwD/wJcA/3OLA/8ElAH/GJAB/0WGAf+OjAH/vpcA/76XAP+5kgD/oosB/2+IAv8LkwH/AJkA/xyP
        Af+qjwH/jnEEjwAAqQAqJycUcGVl0m9kZM44MBsgqYcGzZiNAv+GggL/uJQA/76XAP/CmAD/k4sD/yqE
        Av+bjgD/vZUA/8CXAP++lwD/v5YA/2h2Af8ThQH/BJUB/wCYAP8AmQD/EZEB/52OAf+XdgOhAAA4ARcV
        FhFtYmLMcGVl1DoxFS2siQXZc4oC/3mABP+9lgD/vZQA/5uKAf83ggL/aoAB/8GXAP++lwD/vpcA/76X
        AP+7kwD/OIEB/wCZAP8AmQD/AJgA/wCZAP8BlQD/gIsB/5V0AqQAAB0CAAAACWJZWbtmXV3mIBwTNaaG
        C864lgH/uZUA/7KTAf9YhQP/FoYC/yOKAf+xjwH/upQA/7mUAP++lwD/vpcA/7+WAP9ciAL/AJcB/wCZ
        AP8AmAD/BpIB/xmMAf+OigH/iWsHmAAAIAAAAAACWE9PpGZcXPcWFR0/knkYrMCaCP/BlwD/fosK/weW
        B/8AmQD/D48A/1yGAv9LgwH/nowA/8CYAP++lwD/v5cA/6mRAf9EhwT/F4cE/y17BP9vggP/eIMD/1OB
        Av87XQVxAAAeAAAAAABMREV1bGJi/zAtMlx4ZRxvupgS/8KYAf9sjAr/ApgF/wCYAP8AmAD/AJYA/zmH
        Av+4lAD/vpcA/76XAP++lwD/wJcA/7SPAv9Edgj/GIgC/xuQAf8PkwH/AIoC8wNUCD0AAAAAAAAAADkz
        ND9sYmL4R0FClj81DS+niRXow5kD/1+IA/8AlwH/AJgA/wCYAP8AlwD/UYUB/8CWAP++lwD/vpcA/76X
        AP+/lwD/tJEB/ymKBP8BmAD/JI8G/weWAv8FfgW7GDAYDQAAAAAAAAAAIB4eEWdeXspgV1feGRcgJJN5
        GZSzlAr/LYcB/wCYAP8AmAD/AJgA/wCZAP8kigD/qo4A/7+YAP++lwD/vpcA/76XAP+4lAH/QIoD/wKW
        Af8ujQn/G4QJ8wRkBk8ObA4AAAAAAAAAAAAAAAAAWlFRbXNnaP1RSUuBa1IQLn1+DOIOkwH/AJkA/wCZ
        AP8AmAD/AJgA/wGUAP9sigD/wJcA/76XAP++lwD/vpcA/8CXAP+cjAP/Fo4D/wCSAP0FZgSMCBUJBjIA
        MAAAAAAAAAAAAAAAAABFPz8Wa2BgyGxhYe05MjVLLkgFXBJ8Au0NlQH/E5ID/w2SAf8AlQD/AJkA/yCJ
        Af+qjQH/v5gA/76XAP++lwD/v5cA/7aUAf8whQP2AHIBkAEvAhEHLQcAAAAAAAAAAAAAAAAAAAAAAIBz
        cwBQSklDdmtr5GtiYt8yLDBLRlMAU3h9A9edjgX/mo8C/2eLAf8kjQH/RYgB/7GRAP+/mAD/v5gA/7+Y
        AP+6lAD/pYQB2k9bA2EAEQYHAj8CAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGAP///wBLRUVLamBg1mJa
        Wuk+NzpqVT0FMottAn6igAXJrIgH9qSJA/eujgP6tpEC+7WQAvauiwHmmnsBy4ZrBYRkUAgoe+QFAAAx
        BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRcXAL6trAAzLi8mXVRUjmJZWdpUTE2zPTg+Xk9H
        Q2VjWEGQf2UKRIVrC0t7ZAlPfGUKQWdTAychGwMR//8AAG9aBgAVEQUAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABQUFAD85OQAAAAABPjg5KFlQUHBeU1StYVdX0U9HSY7/6RQAk3cLAI5z
        CQCHbQoAZ1MDACwjAgAICAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABYUFQA/OTkAfG9wADcxMQhaUFEvVU1NNQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////wP+AP8D/AB/A/4AfwP+AH8D/gB/A/+B/wP4A
        P8D8AD/A8AAfwOAAB8DAAAPAwAABwIAAAMCAAABAAAAAQAAAAEAAAABAAAAAAAAAAAAAAABAAAAAQIAA
        AECAAABAgAAAwMAAAMDAAAHA4AADwPAAD8D4AD/A/A//wP+H/8A=
</value>
  </data>
</root>